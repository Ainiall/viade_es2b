{"version":3,"sources":["Map.js"],"names":["RouteMap","_this","Object","_home_travis_build_Arquisoft_viade_es2b_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_travis_build_Arquisoft_viade_es2b_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_Arquisoft_viade_es2b_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","lat","lng","zoom","prevProps","props","gpx","updateMap","parse","filePath","_this2","refs","mapInstance","leafletElement","eachLayer","layer","removeLayer","control","remove","L","tileLayer","addTo","track","GPX","async","polyline_options","color","opacity","weight","lineCap","marker_options","wptIcons","","Icon","iconUrl","Triangle","Circle","Square","Pin","Flag","pointMatchers","regex","icon","startIconUrl","endIconUrl","shadowUrl","gpx_options","parseElements","joinTrackSegments","on","e","element","getElementsByTagName","point","bindPopup","innerHTML","target","fitBounds","getBounds","layers","dragging","disable","enable","position","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_leaflet__WEBPACK_IMPORTED_MODULE_6__","center","ref","react_leaflet__WEBPACK_IMPORTED_MODULE_7__","attribution","url","React","Component"],"mappings":"uOAIqBA,cAEnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,IAAK,OACLC,KAAM,IACNC,KAAM,IALIV,kFASKW,GAEbR,KAAKS,MAAMC,KAAOV,KAAKS,MAAMC,MAAQF,EAAUE,KACjDV,KAAKW,gDAMPX,KAAKY,MAAMZ,KAAKS,MAAMC,mCAGjBG,GAAU,IAAAC,EAAAd,KAE8B,OAAzCA,KAAKe,KAAKC,YAAYC,gBACxBjB,KAAKe,KAAKC,YAAYC,eAAeC,UAAU,SAACC,GAAWL,EAAKC,KAAKC,YAAYC,eAAeG,YAAYD,KAG7F,MAAhBnB,KAAKqB,SACRrB,KAAKqB,QAAQC,SAGXC,IAAEC,UAAU,qDAAqDC,MAAMzB,KAAKe,KAAKC,YAAYC,gBAE7F,IAAIS,EAAQ,IAAIH,IAAEI,IAAId,EAAU,CAC5Be,OAAO,EACPC,iBAAkB,CAChBC,MAAO,QACPC,QAAS,IACTC,OAAQ,EACRC,QAAS,SAEXC,eAAgB,CACdC,SAAU,CACfC,GAAI,IAAIb,IAAEc,KAAK,CACJC,QAAS,gBAEXC,SAAY,IAAIhB,IAAEc,KAAK,CACrBC,QAAS,qBAEXE,OAAU,IAAIjB,IAAEc,KAAK,CACnBC,QAAS,mBAEXG,OAAU,IAAIlB,IAAEc,KAAK,CACnBC,QAAS,mBAEXI,IAAO,IAAInB,IAAEc,KAAK,CAChBC,QAAS,gBAEXK,KAAQ,IAAIpB,IAAEc,KAAK,CACjBC,QAAS,kBAGfM,cAAe,CACb,CACEC,MAAO,OACPC,KAAM,IAAIvB,IAAEc,KAAK,CACfC,QAAS,kBAIfS,aAAc,yBACdC,WAAc,uBACdC,UAAc,sBAEhBC,YAAa,CACXC,cAAe,CAAC,QAAS,QAAS,YAClCC,mBAAmB,KAEpBC,GAAG,WAAY,SAASC,GACwB,MAA7CA,EAAEC,QAAQC,qBAAqB,QAAQ,IAC5BF,EAAEG,MACRC,UAAUJ,EAAEC,QAAQC,qBAAqB,QAAQ,GAAGG,aAE5DN,GAAG,SAAW,SAACC,GAAO,IAAI5C,EAAM4C,EAAEM,OACZ9C,EAAKC,KAAKC,YAAYC,eAAe4C,UAAUnD,EAAIoD,eAClDrC,MAAMzB,KAAKe,KAAKC,YAAYC,gBAExDjB,KAAKqB,QAAUE,IAAEF,QAAQ0C,OAAO,GAAI,CAACpC,IAAMD,IAAQD,MAAMzB,KAAKe,KAAKC,YAAYC,gBAC/EjB,KAAKe,KAAKC,YAAYC,eAAe+C,SAASC,UAC9CjE,KAAKe,KAAKC,YAAYC,eAAe+C,SAASE,0CAI9C,IAAMC,EAAW,CAACnE,KAAKI,MAAMC,IAAKL,KAAKI,MAAME,KAC7C,OACE8D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,OAAQL,EAAU5D,KAAMP,KAAKI,MAAMG,KAAMkE,IAAM,eAClDL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,qDApGwBC,IAAMC","file":"static/js/4.2bcbf0bd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet-gpx\";\n\nexport default class RouteMap extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      lat: 51.505,\n      lng: -0.09,\n      zoom: 13\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n\n    if (this.props.gpx && this.props.gpx !== prevProps.gpx){\n      this.updateMap();\n    } \n\n  }\n\n  updateMap() {\n    this.parse(this.props.gpx);\n  }\n  \n  parse (filePath) {\n\n    if (this.refs.mapInstance.leafletElement !== null) {\n      this.refs.mapInstance.leafletElement.eachLayer((layer) => {this.refs.mapInstance.leafletElement.removeLayer(layer);});\n    }\n\t\n\tif (this.control != null) {\n\t\tthis.control.remove();\n\t}\n\n    L.tileLayer(\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(this.refs.mapInstance.leafletElement);\n\n    var track = new L.GPX(filePath, {\n        async: true,\n        polyline_options: {\n          color: \"green\",\n          opacity: 0.75,\n          weight: 3,\n          lineCap: \"round\"\n        },\n        marker_options: {\n          wptIcons: {\n\t\t\t  \"\": new L.Icon({\n                iconUrl: \"img/pin.png\"\n              }),\n              \"Triangle\": new L.Icon({\n                iconUrl: \"img/triangle.png\"\n              }),\n              \"Circle\": new L.Icon({\n                iconUrl: \"img/circle.png\"\n              }),\n              \"Square\": new L.Icon({\n                iconUrl: \"img/square.png\"\n              }),\n              \"Pin\": new L.Icon({\n                iconUrl: \"img/pin.png\"\n              }),\n              \"Flag\": new L.Icon({\n                iconUrl: \"img/flag.png\"\n              })\n          },\n          pointMatchers: [\n            {\n              regex: /.\\*?/,\n              icon: new L.Icon({\n                iconUrl: \"img/pin.png\"\n              })\n            }\n          ],\n          startIconUrl: \"img/pin-icon-start.png\",\n          endIconUrl:   \"img/pin-icon-end.png\",\n          shadowUrl:    \"img/pin-shadow.png\",\n        },\n        gpx_options: {\n          parseElements: [\"track\", \"route\", \"waypoint\"],\n          joinTrackSegments: false\n        },\n      }).on(\"addpoint\", function(e) {\n        if (e.element.getElementsByTagName(\"name\")[0] != null) {\n          var marker = e.point;\n          marker.bindPopup(e.element.getElementsByTagName(\"name\")[0].innerHTML);\n        }\n      }).on(\"loaded\", ((e) => {var gpx = e.target;\n                               this.refs.mapInstance.leafletElement.fitBounds(gpx.getBounds());}))\n                               .addTo(this.refs.mapInstance.leafletElement);\n\n    this.control = L.control.layers({}, {\"GPX\":track}).addTo(this.refs.mapInstance.leafletElement);\n    this.refs.mapInstance.leafletElement.dragging.disable();\n    this.refs.mapInstance.leafletElement.dragging.enable();\n}\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n      <Map center={position} zoom={this.state.zoom} ref = \"mapInstance\">\n        <TileLayer\n          attribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"\n          url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n        />\n      </Map>\n    );\n  }\n}\n"],"sourceRoot":""}